// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github-observer/internal/core"

	github "github.com/google/go-github/v61/github"

	mock "github.com/stretchr/testify/mock"
)

// IExecutor is an autogenerated mock type for the IExecutor type
type IExecutor struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *IExecutor) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PullRequestEvent provides a mock function with given fields: _a0
func (_m *IExecutor) PullRequestEvent(_a0 github.PullRequestEvent) {
	_m.Called(_a0)
}

// PullRequestReviewEvent provides a mock function with given fields: _a0
func (_m *IExecutor) PullRequestReviewEvent(_a0 github.PullRequestReviewEvent) {
	_m.Called(_a0)
}

// PullRequests provides a mock function with given fields: _a0, _a1
func (_m *IExecutor) PullRequests(_a0 core.Repository, _a1 []*github.PullRequest) {
	_m.Called(_a0, _a1)
}

// RunEvent provides a mock function with given fields: _a0
func (_m *IExecutor) RunEvent(_a0 github.CheckRunEvent) {
	_m.Called(_a0)
}

// WorkflowRuns provides a mock function with given fields: _a0
func (_m *IExecutor) WorkflowRuns(_a0 []*github.WorkflowRun) {
	_m.Called(_a0)
}

// NewIExecutor creates a new instance of IExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *IExecutor {
	mock := &IExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
